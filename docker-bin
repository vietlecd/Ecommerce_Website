#!/bin/bash

# Simple command runner for database operations in Docker
# Usage: bin [migrate|seed] [command] [options]

# Configuration variables
MIGRATIONS_DIR="/var/www/html/assets/config/mysql/migrations"
SEEDERS_DIR="/var/www/html/assets/config/mysql/seeders"
DB_NAME="shoe"
DB_USER="shoes_user"
DB_PASS="shoes_pass"
DB_HOST="mysql" # This is the service name in docker-compose.yml

# Function to check MySQL connection
check_mysql_connection() {
    echo "Checking MySQL connection..."
    if ! mysql -h$DB_HOST -u$DB_USER -p$DB_PASS --skip-ssl -e "SELECT 1" &>/dev/null; then
        echo "❌ Failed to connect to MySQL."
        exit 1
    else
        echo "✅ MySQL connection successful"
    fi
}

# Function to list available migrations
list_migrations() {
    echo "Available migrations:"
    if [ -d "$MIGRATIONS_DIR" ]; then
        local count=0
        for file in $(find "$MIGRATIONS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
            local filename=$(basename "$file")
            echo "  - $filename"
            count=$((count+1))
        done
        
        if [ $count -eq 0 ]; then
            echo "  No migration files found in $MIGRATIONS_DIR"
        fi
    else
        echo "  Directory $MIGRATIONS_DIR does not exist."
    fi
}

# Function to list available seeders
list_seeders() {
    echo "Available seeders:"
    if [ -d "$SEEDERS_DIR" ]; then
        local count=0
        for file in $(find "$SEEDERS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
            local filename=$(basename "$file")
            echo "  - $filename"
            count=$((count+1))
        done
        
        if [ $count -eq 0 ]; then
            echo "  No seeder files found in $SEEDERS_DIR"
        fi
    else
        echo "  Directory $SEEDERS_DIR does not exist."
    fi
}

# Function to run a specific migration
run_migration() {
    local file=$1
    local full_path="$MIGRATIONS_DIR/$file"
    
    # Check if file exists
    if [ ! -f "$full_path" ]; then
        echo "Error: Migration file not found: $full_path"
        echo "Run with --list to see available migrations."
        exit 1
    fi
    
    echo "Running migration: $file"
    mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME < "$full_path"
    
    if [ $? -eq 0 ]; then
        # Update migration history
        mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -e "
            CREATE TABLE IF NOT EXISTS migrations (
                id INT AUTO_INCREMENT PRIMARY KEY,
                migration VARCHAR(255) NOT NULL,
                batch INT NOT NULL,
                applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            INSERT INTO migrations (migration, batch) VALUES ('$file', (SELECT IFNULL(MAX(batch), 0) + 1 FROM migrations m));
        "
        echo "✅ Migration $file completed"
    else
        echo "❌ Migration $file failed"
        exit 1
    fi
}

# Function to run a specific seeder
run_seeder() {
    local file=$1
    local full_path="$SEEDERS_DIR/$file"
    
    # Check if file exists
    if [ ! -f "$full_path" ]; then
        echo "Error: Seeder file not found: $full_path"
        echo "Run with --list to see available seeders."
        exit 1
    fi
    
    echo "Running seeder: $file"
    mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME < "$full_path"
    
    if [ $? -eq 0 ]; then
        echo "✅ Seeder $file completed"
    else
        echo "❌ Seeder $file failed"
        exit 1
    fi
}

# Function to reset all seeded tables
reset_seeded_tables() {
    echo "Resetting all seeded tables..."
    echo "Analyzing all seeder files to identify tables..."
    local all_tables=""
    
    # Loop through each seeder file
    for file in $(find "$SEEDERS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
        echo "- $(basename "$file")"
        # Extract table names from INSERT INTO statements
        tables=$(grep -o -E "INSERT INTO \`([a-zA-Z0-9_]+)\`" "$file" | sed -E "s/INSERT INTO \`([a-zA-Z0-9_]+)\`/\1/")
        all_tables="$all_tables $tables"
    done
    
    # Get unique table names
    unique_tables=$(echo "$all_tables" | tr ' ' '\n' | sort -u | grep -v "^$")
    
    if [ -z "$unique_tables" ]; then
        echo "⚠️ No tables identified for reset"
        return 0
    fi
    
    echo "Tables identified for reset:"
    for table in $unique_tables; do
        echo "  - $table"
    done
    
    echo "Clearing table data:"
    for table in $unique_tables; do
        echo "  - Clearing table: $table"
        mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -e "DELETE FROM \`$table\`; ALTER TABLE \`$table\` AUTO_INCREMENT = 1;"
        if [ $? -eq 0 ]; then
            echo "    ✅ Cleared table $table"
        else
            echo "    ❌ Failed to clear table $table"
            return 1
        fi
    done
    echo "✅ All seeded data has been removed"
}

# Function to rollback migrations
rollback_migrations() {
    local count=${1:-1}
    
    # Get the batch numbers to rollback
    local batches=$(mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -s -N -e "
        SELECT DISTINCT batch FROM migrations ORDER BY batch DESC LIMIT $count;
    ")
    
    if [ -z "$batches" ]; then
        echo "No migrations to rollback"
        return 0
    fi
    
    for batch in $batches; do
        echo "Rolling back batch $batch..."
        
        # Get migrations in this batch
        local migrations=$(mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -s -N -e "
            SELECT migration FROM migrations WHERE batch = $batch ORDER BY id DESC;
        ")
        
        for migration in $migrations; do
            # Check if there's a corresponding .down.sql file
            local down_file="${migration%.sql}.down.sql"
            local down_path="$MIGRATIONS_DIR/$down_file"
            
            if [ -f "$down_path" ]; then
                echo "Running down migration: $down_file"
                mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME < "$down_path"
                
                if [ $? -ne 0 ]; then
                    echo "❌ Rollback of $migration failed"
                    exit 1
                fi
            else
                echo "⚠️ No down migration found for $migration, skipping rollback SQL execution"
            fi
            
            # Remove migration from history regardless
            mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -e "
                DELETE FROM migrations WHERE migration = '$migration';
            "
            echo "✅ Rolled back $migration"
        done
    done
    
    echo "✅ Rollback completed"
}

# Function to clear tables before seeding
clear_tables_for_seeder() {
    local file=$1
    
    echo "Analyzing $file to identify tables..."
    # Extract table names from INSERT INTO statements
    tables=$(grep -o -E "INSERT INTO \`([a-zA-Z0-9_]+)\`" "$file" | sed -E "s/INSERT INTO \`([a-zA-Z0-9_]+)\`/\1/" | sort -u)
    
    if [ -z "$tables" ]; then
        echo "⚠️ No tables identified for clearing in $file"
        return 0
    fi
    
    echo "Clearing tables before seeding:"
    for table in $tables; do
        echo "  - Clearing table: $table"
        mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -e "DELETE FROM \`$table\`; ALTER TABLE \`$table\` AUTO_INCREMENT = 1;"
        if [ $? -eq 0 ]; then
            echo "    ✅ Cleared table $table"
        else
            echo "    ❌ Failed to clear table $table"
            return 1
        fi
    done
    echo "✅ All tables cleared successfully"
    return 0
}

# Show help message for migration commands
show_migrate_help() {
    echo "Usage: bin migrate [command] [options]"
    echo "Commands:"
    echo "  all                       Run all migrations"
    echo "  <filename.sql>            Run a specific migration file"
    echo "  rollback [n]              Roll back the last n migrations (default: 1)"
    echo "  reset                     Roll back all migrations"
    echo "  --help, -h                Display this help message"
    echo "  --list, -l                List available migrations"
    echo ""
    echo "Examples:"
    echo "  bin migrate all                       # Run all migrations"
    echo "  bin migrate 001_create_qna_tables.sql # Run a specific migration"
    echo "  bin migrate rollback                  # Roll back the last migration"
    echo "  bin migrate rollback 3                # Roll back the last 3 migrations"
    echo "  bin migrate --list                    # List available migrations"
}

# Show help message for seeder commands
show_seed_help() {
    echo "Usage: bin seed [command] [options]"
    echo "Commands:"
    echo "  all                       Run all seeders"
    echo "  reset                     Remove all seeded data"
    echo "  <filename.sql>            Run a specific seeder file"
    echo "  --help, -h                Display this help message"
    echo "  --list, -l                List available seeders"
    echo "  --clear [all|file.sql]    Clear tables before running seeders"
    echo ""
    echo "Examples:"
    echo "  bin seed all                          # Run all seeders"
    echo "  bin seed 001_seed_about_qna_data.sql  # Run a specific seeder"
    echo "  bin seed reset                        # Clear all seeded data"
    echo "  bin seed --clear all                  # Clear tables before running all seeders"
    echo "  bin seed --clear file.sql             # Clear tables before running specific seeder"
    echo "  bin seed --list                       # List available seeders"
}

# Check if a command was provided
if [ $# -eq 0 ]; then
    echo "Error: No command specified"
    echo "Usage: bin [migrate|seed] [command] [options]"
    echo "Examples:"
    echo "  bin migrate all        # Run all migrations"
    echo "  bin seed all           # Run all seeders"
    exit 1
fi

# Get the command
CMD=$1
shift

# Main migrate command handler
handle_migrate() {
    echo "====================================="
    echo "MySQL Database Migration Runner"
    echo "====================================="
    
    case "$1" in
        "all")
            check_mysql_connection
            echo "Running all migrations in $MIGRATIONS_DIR"
            for file in $(find "$MIGRATIONS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
                run_migration "$(basename "$file")"
            done
            echo "====================================="
            echo "✅ All migrations completed successfully"
            echo "====================================="
            ;;
        
        "rollback")
            check_mysql_connection
            if [ -z "$2" ]; then
                rollback_migrations 1
            else
                rollback_migrations "$2"
            fi
            ;;
        
        "reset")
            check_mysql_connection
            echo "Rolling back all migrations..."
            # Get the total number of batches
            local batch_count=$(mysql --skip-ssl -h$DB_HOST -u$DB_USER -p$DB_PASS $DB_NAME -s -N -e "
                SELECT COUNT(DISTINCT batch) FROM migrations;
            ")
            
            if [ -z "$batch_count" ] || [ "$batch_count" -eq "0" ]; then
                echo "No migrations to reset"
            else
                rollback_migrations "$batch_count"
            fi
            ;;
        
        "--list" | "-l")
            list_migrations
            ;;
        
        "--help" | "-h")
            show_migrate_help
            ;;
        
        "")
            echo "Error: No command specified for migration mode"
            show_migrate_help
            exit 1
            ;;
        
        *)
            # Treat as a specific migration file
            check_mysql_connection
            run_migration "$1"
            ;;
    esac
}

# Main seed command handler
handle_seed() {
    echo "====================================="
    echo "MySQL Database Seeder"
    echo "====================================="
    
    case "$1" in
        "all")
            check_mysql_connection
            echo "Running all seeders in $SEEDERS_DIR"
            for file in $(find "$SEEDERS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
                run_seeder "$(basename "$file")"
            done
            echo "====================================="
            echo "✅ All seeders completed successfully"
            echo "====================================="
            ;;
        
        "reset")
            check_mysql_connection
            reset_seeded_tables
            ;;
        
        "--list" | "-l")
            list_seeders
            ;;
        
        "--help" | "-h")
            show_seed_help
            ;;
        
        "--clear")
            check_mysql_connection
            case "$2" in
                "all")
                    # Clear and seed all
                    for file in $(find "$SEEDERS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
                        clear_tables_for_seeder "$file"
                    done
                    
                    echo "Running all seeders in $SEEDERS_DIR"
                    for file in $(find "$SEEDERS_DIR" -name "*.sql" -not -name "*.down.sql" | sort); do
                        run_seeder "$(basename "$file")"
                    done
                    echo "====================================="
                    echo "✅ All seeders completed successfully"
                    echo "====================================="
                    ;;
                
                "")
                    echo "Error: --clear requires an argument (all or a specific file)"
                    show_seed_help
                    exit 1
                    ;;
                
                *)
                    file="$SEEDERS_DIR/$2"
                    if [ -f "$file" ]; then
                        clear_tables_for_seeder "$file" && run_seeder "$(basename "$file")"
                    else
                        echo "Error: Seeder file not found: $file"
                        list_seeders
                        exit 1
                    fi
                    ;;
            esac
            ;;
        
        "")
            echo "Error: No command specified for seed mode"
            show_seed_help
            exit 1
            ;;
        
        *)
            # Treat as a specific seeder file
            check_mysql_connection
            run_seeder "$1"
            ;;
    esac
}

# Route to the appropriate handler
case "$CMD" in
    "migrate")
        handle_migrate "$@"
        ;;
    "seed")
        handle_seed "$@"
        ;;
    *)
        echo "Error: Unknown command '$CMD'"
        echo "Available commands: migrate, seed"
        exit 1
        ;;
esac
